package com.auto.code.generator.core;

import java.io.File;
import java.util.HashMap;

import com.auto.code.generator.specification.ApiSpecification;
import com.auto.code.generator.specification.Utility;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;

public class DataAccessClassGenerator {
	private static final String PACKAGE_NAME = ".dao";

	public static void generateDaoClass(JCodeModel codeModel, ApiSpecification specification, String basePackage,
			HashMap<String, Class<? extends Object>> parameterMap, String autoGeneRatedFilePath) throws Exception {
		@SuppressWarnings("rawtypes")
		Class responseClass = null;
		@SuppressWarnings("rawtypes")
		Class requestClass = null;
		// Create a new package
		JPackage jp = codeModel._package(basePackage + PACKAGE_NAME);
		// Create a new class
		JDefinedClass jc = null;
		if (jp._getClass(specification.getDao().getClassName()) != null) {
			jc = jp._getClass(specification.getDao().getClassName());
		} else {
			jc = jp._class(specification.getDao().getClassName());
			jc.annotate(codeModel.ref(Constant.REPOSITORY_ANNOTATION));
			jc.javadoc().add("Auto Generated Dao class");
		}
		try {
			responseClass = Utility.getAppClasses(specification,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + specification.getApiResponse().getClassName(),
					autoGeneRatedFilePath);
			JMethod apiMethod = jc.method(JMod.PUBLIC, responseClass, specification.getDao().getMethodName());
			apiMethod._throws(Exception.class);
			apiMethod.body()._return(JExpr._new(codeModel.ref(responseClass)));
			if (specification.getApiRequest() != null && specification.getApiRequest().getClassName() != null) {
				requestClass = Utility.getAppClasses(specification,
						basePackage + Constant.DOMAIN_PACKAGE_NAME + specification.getApiRequest().getClassName(),
						autoGeneRatedFilePath);
				apiMethod.param(requestClass, Constant.REQUEST_VARIABLE_NAME);
			}
			if (!parameterMap.isEmpty()) {
				parameterMap.forEach((K, V) -> {
					apiMethod.param(V, K);

				});

			}
		} catch (Exception e) {
			throw new Exception("[Error generating data access class for " + specification.getApiMethodType()
					+ " API : ]-Problem getting request and reponse file.Please make sure all files should be generated!!",
					e);
		}
		codeModel.build(new File(autoGeneRatedFilePath));
		Utility.compileClasses(specification, jp.getPackage().name(), jc.name(), autoGeneRatedFilePath);
	}

}
