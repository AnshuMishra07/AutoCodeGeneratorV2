package com.auto.code.generator.core;

import java.io.File;
import java.util.HashMap;

import com.auto.code.generator.specification.ApiSpecification;
import com.auto.code.generator.specification.Utility;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JInvocation;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JVar;

public class ServiceClassGenerator {
	private static final String PACKAGE_NAME = ".service";

	public static void generateServiceClass(JCodeModel codeModel, ApiSpecification specification, String basePackage,
			HashMap<String, Class<? extends Object>> parameterMap, String autoGeneRatedFilePath) throws Exception {
		// Create a new package
		JPackage jp = codeModel._package(basePackage + PACKAGE_NAME);
		// Create a new class
		JDefinedClass jc = null;
		if (jp._getClass(specification.getService().getClassName()) != null) {
			jc = jp._getClass(specification.getService().getClassName());
		} else {
			jc = jp._class(specification.getService().getClassName());
			jc.annotate(codeModel.ref(Constant.SERVICE_ANNOTATION));
			jc.javadoc().add("Auto Generated Service class");
		}
		@SuppressWarnings("rawtypes")
		Class responseClass = null;
		@SuppressWarnings("rawtypes")
		Class requestClass = null;
		try {
			responseClass = Utility.getAppClasses(specification,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + specification.getApiResponse().getClassName(),
					autoGeneRatedFilePath);
			if (specification.getService() != null && specification.getService().getMethodName() != null) {
				JMethod apiMethod = jc.method(JMod.PUBLIC, responseClass, specification.getService().getMethodName());
				apiMethod._throws(Exception.class);
				if (specification.getApiRequest() != null && specification.getApiRequest().getClassName() != null) {
					requestClass = Utility.getAppClasses(specification,
							basePackage + Constant.DOMAIN_PACKAGE_NAME + specification.getApiRequest().getClassName(),
							autoGeneRatedFilePath);
					apiMethod.param(requestClass, Constant.REQUEST_VARIABLE_NAME);
				}
				JFieldVar feild = null;
				if (jc.fields() != null
						&& !jc.fields().containsKey(Utility.constructVariable(specification.getDao().getClassName()))) {
					feild = jc
							.field(JMod.PRIVATE,
									Utility.getAppClasses(specification,
											basePackage + Constant.DAO_PACKAGE_NAME
													+ specification.getDao().getClassName(),
											autoGeneRatedFilePath),
									Utility.constructVariable(specification.getDao().getClassName()));
					feild.annotate(codeModel.ref(Constant.AUTOWIRE_ANNOTATION));
				}

				if (!parameterMap.isEmpty()) {
					parameterMap.forEach((K, V) -> {
						apiMethod.param(V, K);

					});

				}
				apiMethod.body()._return(getDaoMethod(codeModel, jc, specification, basePackage));

			}
		} catch (Exception e) {
			throw new Exception("[Error generating service class for " + specification.getApiMethodType()
					+ " API : ]-Problem getting request and reponse file.Please make sure all files should be generated!!",
					e);
		}

		codeModel.build(new File(autoGeneRatedFilePath));
		Utility.compileClasses(specification, jp.getPackage().name(), jc.name(), autoGeneRatedFilePath);
	}

	private static JInvocation getDaoMethod(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage) {
		JPackage daoPk = codeModel._package(basePackage + ".dao");
		JDefinedClass dao = null;
		dao = daoPk._getClass(spec.getDao().getClassName());
		JMethod daoM = null;
		if (dao != null && dao.methods() != null) {
			for (JMethod m : dao.methods()) {
				if (m.name().equalsIgnoreCase(spec.getDao().getMethodName())) {
					daoM = m;
				}
			}

		}
		JInvocation invoke = jc.fields().get(Utility.constructVariable(spec.getDao().getClassName())).invoke(daoM);
		JVar[] parameter = daoM.listParams();
		for (int i = 0; i < parameter.length; i++) {
			invoke.arg(parameter[i]);
		}
		return invoke;
	}
}
