package com.auto.code.generator.core;

import java.util.HashMap;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.auto.code.generator.specification.ApiSpecification;
import com.auto.code.generator.specification.FieldSpecification;
import com.auto.code.generator.specification.Utility;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JInvocation;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;
import com.sun.codemodel.JVar;

public class ControllerMethodGenerator {

	public static void generatePostMethod(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage, String autoGeneRatedFilePath) throws Exception {
		@SuppressWarnings("rawtypes")
		Class responseClass = null;
		@SuppressWarnings("rawtypes")
		Class requestClass = null;
		try {
			requestClass = Utility.getAppClasses(spec,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + spec.getApiRequest().getClassName(),
					autoGeneRatedFilePath);
			responseClass = Utility.getAppClasses(spec,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + spec.getApiResponse().getClassName(),
					autoGeneRatedFilePath);
		} catch (Exception e) {
			throw new Exception(
					"[Error generating Post API : ]-Problem getting request and reponse file.Please make sure all files should be generated!!",
					e);
		}
		JMethod apiMethod = jc.method(JMod.PUBLIC, responseClass, spec.getController().getMethodName());
		HashMap<String, Class<? extends Object>> parameterMap = getPathVariable(codeModel, spec, apiMethod);
		generateAdditionalClasses(codeModel, jc, spec, basePackage, parameterMap, autoGeneRatedFilePath);
		apiMethod.annotate(codeModel.ref(Constant.POST_MAPPING)).param("value", spec.getApiUrl());
		apiMethod.param(requestClass, Constant.REQUEST_VARIABLE_NAME)
				.annotate(codeModel.ref(Constant.REQUEST_BODY_ANNOTATION));
		apiMethod._throws(Exception.class);
		JInvocation invoke = getServiceMethod(codeModel, jc, spec, basePackage);
		apiMethod.body()._return(invoke);

	}

	public static void generateGetMethod(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage, String autoGeneRatedFilePath) throws Exception {
		@SuppressWarnings("rawtypes")
		Class responseClass = null;
		try {
			responseClass = Utility.getAppClasses(spec,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + spec.getApiResponse().getClassName(),
					autoGeneRatedFilePath);
			if (spec.getApiResponse().getReturnType() != null && !spec.getApiResponse().getGenerate()) {
				responseClass = Utility.getAppClasses(spec, spec.getApiResponse().getReturnType(),
						autoGeneRatedFilePath);
			}

		} catch (Exception e) {
			throw new Exception(
					"[Error generating Get API : ]-Problem getting request and response files.Please check specification file!!",
					e);
		}
		JMethod apiMethod = jc.method(JMod.PUBLIC, responseClass, spec.getController().getMethodName());
		HashMap<String, Class<? extends Object>> parameterMap = getPathVariable(codeModel, spec, apiMethod);
		extractQueryParam(codeModel, spec, apiMethod, parameterMap, autoGeneRatedFilePath);
		generateAdditionalClasses(codeModel, jc, spec, basePackage, parameterMap, autoGeneRatedFilePath);
		apiMethod.annotate(codeModel.ref(Constant.GET_MAPPING)).param("value", spec.getApiUrl());
		apiMethod._throws(Exception.class);
		JInvocation invoke = getServiceMethod(codeModel, jc, spec, basePackage);
		apiMethod.body()._return(invoke);

	}

	public static void generatePutMethod(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage, String autoGeneRatedFilePath) throws Exception {
		@SuppressWarnings("rawtypes")
		Class responseClass = null;
		@SuppressWarnings("rawtypes")
		Class requestClass = null;

		try {
			responseClass = Utility.getAppClasses(spec,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + spec.getApiResponse().getClassName(),
					autoGeneRatedFilePath);
			requestClass = Utility.getAppClasses(spec,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + spec.getApiRequest().getClassName(),
					autoGeneRatedFilePath);
		} catch (Exception e) {
			throw new Exception(
					"[Error generating Put API : ]-Problem getting request and response files.Please check specification file!!",
					e);
		}
		JMethod apiMethod = jc.method(JMod.PUBLIC, responseClass, spec.getController().getMethodName());
		apiMethod.annotate(codeModel.ref(Constant.PUT_MAPPING)).param("value", spec.getApiUrl());
		HashMap<String, Class<? extends Object>> parameterMap = getPathVariable(codeModel, spec, apiMethod);
		generateAdditionalClasses(codeModel, jc, spec, basePackage, parameterMap, autoGeneRatedFilePath);
		apiMethod.param(requestClass, Constant.REQUEST_VARIABLE_NAME)
				.annotate(codeModel.ref(Constant.REQUEST_BODY_ANNOTATION));
		apiMethod._throws(Exception.class);
		JInvocation invoke = getServiceMethod(codeModel, jc, spec, basePackage);
		apiMethod.body()._return(invoke);

	}

	public static void generateDeleteMethod(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage, String autoGeneRatedFilePath) throws Exception {
		@SuppressWarnings("rawtypes")
		Class responseClass = null;
		try {
			responseClass = Utility.getAppClasses(spec,
					basePackage + Constant.DOMAIN_PACKAGE_NAME + spec.getApiResponse().getClassName(),
					autoGeneRatedFilePath);
		} catch (Exception e) {
			throw new Exception(
					"[Error generating Delete API : ]-Problem getting request and response files.Please check specification file!!",
					e);
		}
		JMethod apiMethod = jc.method(JMod.PUBLIC, responseClass, spec.getController().getMethodName());
		apiMethod.annotate(codeModel.ref(Constant.DELETE_MAPPING)).param("value", spec.getApiUrl());
		HashMap<String, Class<? extends Object>> parameterMap = getPathVariable(codeModel, spec, apiMethod);
		extractQueryParam(codeModel, spec, apiMethod, parameterMap, autoGeneRatedFilePath);
		generateAdditionalClasses(codeModel, jc, spec, basePackage, parameterMap, autoGeneRatedFilePath);
		apiMethod._throws(Exception.class);
		JInvocation invoke = getServiceMethod(codeModel, jc, spec, basePackage);
		apiMethod.body()._return(invoke);

	}

	private static HashMap<String, Class<? extends Object>> getPathVariable(JCodeModel codeModel, ApiSpecification spec,
			JMethod apiMethod) {
		HashMap<String, Class<? extends Object>> parameterMap = new HashMap<String, Class<? extends Object>>();
		String[] urlVariable = Utility.getUrlPathVariable(spec.getApiUrl());
		if (urlVariable != null && urlVariable.length > 0) {
			for (int i = 0; i < urlVariable.length; i++) {
				apiMethod.param(String.class, urlVariable[i]).annotate(codeModel.ref(Constant.PATH_VARIABLE_ANNOTATION))
						.param("value", urlVariable[i]);
				parameterMap.put(urlVariable[i], String.class);
			}
		}
		return parameterMap;
	}

	private static void extractQueryParam(JCodeModel codeModel, ApiSpecification spec, JMethod apiMethod,
			HashMap<String, Class<? extends Object>> parameterMap, String autoGeneRatedFilePath) throws Exception {
		if (!CollectionUtils.isEmpty(spec.getQueryParams())) {
			for (FieldSpecification query : spec.getQueryParams()) {
				try {
					apiMethod
							.param(Utility.getAppClasses(spec, query.getType(), autoGeneRatedFilePath), query.getName())
							.annotate(codeModel.ref(Constant.REQUEST_PARAM)).param("value", query.getName());
					parameterMap.put(query.getName(), Class.forName(query.getType()));
				} catch (ClassNotFoundException e) {
					throw new Exception(
							"[Error generating Get API : ]-Problem getting query parameter name and type.Please check specification file!!",
							e);
				}
			}

		}
	}

	private static JInvocation getServiceMethod(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage) {
		JPackage servicepk = codeModel._package(basePackage + ".service");
		JDefinedClass service = null;
		service = servicepk._getClass(spec.getService().getClassName());
		JMethod serviceM = null;
		if (service != null && service.methods() != null) {
			for (JMethod m : service.methods()) {
				if (m.name().equalsIgnoreCase(spec.getService().getMethodName())) {
					serviceM = m;
				}
			}

		}
		JInvocation invoke = jc.fields().get(Utility.constructVariable(spec.getService().getClassName()))
				.invoke(serviceM);
		JVar[] parameter = serviceM.listParams();
		for (int i = 0; i < parameter.length; i++) {
			invoke.arg(parameter[i]);
		}
		return invoke;
	}

	private static void generateAdditionalClasses(JCodeModel codeModel, JDefinedClass jc, ApiSpecification spec,
			String basePackage, HashMap<String, Class<? extends Object>> parameterMap, String autoGeneRatedFilePath)
			throws Exception {
		if (spec.getDao() != null && StringUtils.isNotBlank(spec.getDao().getClassName())
				&& StringUtils.isNotBlank(spec.getDao().getMethodName())) {
			DataAccessClassGenerator.generateDaoClass(codeModel, spec, basePackage, parameterMap,
					autoGeneRatedFilePath);
		}
		if (spec.getService() != null && StringUtils.isNotBlank(spec.getService().getClassName())
				&& StringUtils.isNotBlank(spec.getService().getMethodName())) {
			ServiceClassGenerator.generateServiceClass(codeModel, spec, basePackage, parameterMap,
					autoGeneRatedFilePath);
			JFieldVar feild = null;
			try {
				if (jc.fields() != null
						&& !jc.fields().containsKey(Utility.constructVariable(spec.getService().getClassName()))) {
					feild = jc
							.field(JMod.PRIVATE,
									Utility.getAppClasses(spec,
											basePackage + Constant.SERVICE_PACKAGE_NAME
													+ spec.getService().getClassName(),
											autoGeneRatedFilePath),
									Utility.constructVariable(spec.getService().getClassName()));
					feild.annotate(codeModel.ref(Constant.AUTOWIRE_ANNOTATION));
				}

			} catch (Exception e) {
				throw new Exception("[Error generating " + spec.getApiMethodType()
						+ "API : ]-Problem getting service file.Please make sure all files should be generated!!", e);
			}
		}
	}
}
