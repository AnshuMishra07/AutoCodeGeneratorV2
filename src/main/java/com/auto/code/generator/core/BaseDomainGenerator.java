package com.auto.code.generator.core;

import java.io.File;
import java.io.Serializable;
import java.util.List;

import org.apache.commons.collections4.CollectionUtils;

import com.auto.code.generator.specification.ApiSpecification;
import com.auto.code.generator.specification.BaseDomainSpecification;
import com.auto.code.generator.specification.FieldSpecification;
import com.auto.code.generator.specification.Utility;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JExpr;
import com.sun.codemodel.JFieldVar;
import com.sun.codemodel.JMethod;
import com.sun.codemodel.JMod;
import com.sun.codemodel.JPackage;

public class BaseDomainGenerator {
	private static final String PACKAGE_NAME = ".domain";

	protected void generateCore(JCodeModel codeModel, String className, List<FieldSpecification> feilds,
			String basePackage, ApiSpecification specification, String autoGeneRatedFilePath) throws Exception {
		JPackage jp = codeModel._package(basePackage + PACKAGE_NAME);
		JDefinedClass jc = null;
		if (jp._getClass(className) != null) {
			jc = jp._getClass(className);
		} else {
			jc = jp._class(className);
			jc._implements(Serializable.class);
			jc.javadoc().add("Auto generated " + jc.name() + " class");
			jc.constructor(JMod.PUBLIC).javadoc().add("Creates a new " + jc.name() + Constant.CURRENT_DIR);
			jc.field(JMod.STATIC | JMod.FINAL, Long.class, "serialVersionUID", JExpr.lit(1L));
		}

		for (FieldSpecification f : feilds) {
			JFieldVar feild = null;
			try {
				if (f.getType().startsWith("java")) {
					feild = jc.field(JMod.PRIVATE, Class.forName(f.getType()), f.getName());
				} else {
					feild = jc.field(JMod.PRIVATE,
							Utility.getAppClasses(specification, f.getType(), autoGeneRatedFilePath), f.getName());
				}
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
			// Add get method
			JMethod getter = jc.method(JMod.PUBLIC, feild.type(), "get" + Utility.constructCamelCase(f.getName()));
			getter.body()._return(feild);
			getter.javadoc().add("Returns the " + feild.type().fullName() + Constant.CURRENT_DIR);
			getter.javadoc().addReturn().add(feild.name());

			// Add set method
			JMethod setter = jc.method(JMod.PUBLIC, codeModel.VOID, "set" + Utility.constructCamelCase(f.getName()));
			setter.param(feild.type(), feild.name());
			setter.body().assign(JExpr._this().ref(feild.name()), JExpr.ref(feild.name()));
			setter.javadoc().add("Set the " + feild.type().fullName() + Constant.CURRENT_DIR);
			setter.javadoc().addParam(feild.name()).add("the new " + feild.type().fullName());

		}
		codeModel.build(new File(autoGeneRatedFilePath));
		Utility.compileClasses(specification, jp.getPackage().name(), jc.name(), autoGeneRatedFilePath);
	}

	protected void generateComplexType(JCodeModel codeModel, List<BaseDomainSpecification> complexType,
			String basePackage, ApiSpecification specification, String autoGeneRatedFilePath) throws Exception {
		JPackage jp = null;
		JDefinedClass jc = null;
		for (BaseDomainSpecification cType : complexType) {
			if (Boolean.TRUE.equals(cType.getGenerate()) && cType.getEnumName() == null) {
				generateCore(codeModel, cType.getClassName(), cType.getFields(), basePackage, specification,
						autoGeneRatedFilePath);
			}
			if (cType.getEnumName() != null && CollectionUtils.isNotEmpty(cType.getEnumValues())
					&& Boolean.TRUE.equals(cType.getGenerate())) {
				jp = codeModel._package(basePackage + PACKAGE_NAME);

				if (jp._enum(cType.getEnumName()) != null) {
					jc = jp._getClass(cType.getEnumName());
					jc.javadoc().add("Auto generated enum " + cType.getEnumName());
					// Add default constructor
					jc.constructor(JMod.PRIVATE).javadoc().add("Creates a new " + jc.name() + ".");
				} else {
					jc = jp._enum(cType.getEnumName());
					// Add Javadoc
					jc.javadoc().add("Auto generated enum");
					// Add default constructor
					jc.constructor(JMod.PRIVATE).javadoc().add("Creates a new " + jc.name() + ".");
				}
				for (String enumVal : cType.getEnumValues()) {
					jc.enumConstant(enumVal);
				}
				codeModel.build(new File(autoGeneRatedFilePath));
				Utility.compileClasses(specification, jp.getPackage().name(), jc.name(), autoGeneRatedFilePath);
			}

		}

	}

}
