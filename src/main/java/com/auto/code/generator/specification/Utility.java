package com.auto.code.generator.specification;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import com.auto.code.generator.core.Compiler;
import com.auto.code.generator.core.Constant;

public class Utility {

	public static String constructCamelCase(String name) {
		return name.substring(0, 1).toUpperCase() + name.substring(1);

	}

	public static String constructVariable(String name) {
		return name.substring(0, 1).toLowerCase() + name.substring(1);

	}

	public static String[] getUrlPathVariable(String url) {
		String[] arr = null;
		if (url != null && url.contains("{")) {
			arr = StringUtils.substringsBetween(url, "{", "}");

		}
		return arr;

	}

	public static String getPathFromPackageName(String packageName) {
		if (StringUtils.isNotEmpty(packageName)) {
			String separator = System.getProperty(Constant.FILE_SEPRATOR);
			packageName = StringUtils.replace(packageName, Constant.CURRENT_DIR, separator);
		}
		return packageName;
	}

	public static void compileClasses(ApiSpecification specification, String packageName, String className,
			String autoGeneRatedFilePath) {
		String separator = System.getProperty(Constant.FILE_SEPRATOR);
		new Compiler().compile(autoGeneRatedFilePath + Utility.getPathFromPackageName(packageName) + separator
				+ className + Constant.JAVA_EXT, autoGeneRatedFilePath + Constant.TARGET_DIR);
	}

	public static Class getAppClasses(ApiSpecification specification, String classType, String autoGeneRatedFilePath) {
		Class loadedClass = null;
		URLClassLoader classL = null;
		try {
			classL = new URLClassLoader(
					new URL[] { new File(autoGeneRatedFilePath + Constant.TARGET_DIR).toURI().toURL() });
			loadedClass = classL.loadClass(classType);

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				classL.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return loadedClass;
	}

	public static void validateSpecification(GeneralSpecification specification) throws Exception {
		if (specification.getAutoGeneratedFilePath() == null) {
			System.out.println("AutoGenerateFilePath is required variable");
			throw new Exception("AutoGenerateFilePath is required variable");
		}
		if (specification.getApiSpecification() == null
				&& CollectionUtils.isEmpty(specification.getApiSpecification())) {
			System.out.println("Atleast one API specification is required");
			throw new Exception("Atleast one API specification is required");
		}

		if (specification.getBasePackageName() == null) {
			System.out.println("BasePackage is required variable");
			throw new Exception("BasePackage is required variable");
		}
		if (specification.getRootPath() == null) {
			System.out.println("RootPath is required variable");
			throw new Exception("RootPath is required variable");
		}
		specification.getApiSpecification().forEach(s -> {
			try {
				validateApiSpec(s);
			} catch (Exception e) {
				e.printStackTrace();
			}
		});

	}

	private static void validateApiSpec(ApiSpecification specification) throws Exception {
		if (specification.getApiMethodType() == null) {
			System.out.println("Method type is required variable");
			throw new Exception("Method type is required variable");
		}
		if (specification.getApiUrl() == null) {
			System.out.println("API URL is required variable");
			throw new Exception("API URL is required variable");
		}
		if (specification.getApiRequest() != null && (specification.getApiRequest().getClassName() == null
				|| CollectionUtils.isEmpty(specification.getApiRequest().getFields()))) {
			System.out.println("Please check API request- Class name and feilds are required feild.");
			throw new Exception("Please check API request- Class name and feilds are required feild.");
		}
		if (specification.getApiRequest() != null
				&& CollectionUtils.isNotEmpty(specification.getApiRequest().getComplexType())) {
			specification.getApiRequest().getComplexType().forEach(complexType -> {
				try {
					if (complexType.getEnumName() == null && (complexType.getClassName() == null
							|| CollectionUtils.isEmpty(complexType.getFields()))) {
						System.out.println("Complex Type class name and feilds are required feild");
						throw new Exception("Complex Type class name and feilds are required feild");
					}

					if (complexType.getEnumName() != null && complexType.getEnumValues() == null) {
						System.out.println("Please define values for all enum");
						throw new Exception("Please define values for all enum");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

			});
		}
		if (specification.getApiResponse() != null
				&& CollectionUtils.isNotEmpty(specification.getApiResponse().getComplexType())) {
			specification.getApiResponse().getComplexType().forEach(complexType -> {
				try {
					if (complexType.getEnumName() == null && (complexType.getClassName() == null
							|| CollectionUtils.isEmpty(complexType.getFields()))) {
						System.out.println("Complex Type class name and feilds are required feild");
						throw new Exception("Complex Type class name and feilds are required feild");
					}

					if (complexType.getEnumName() != null && complexType.getEnumValues() == null) {
						System.out.println("Please define values for all enum");
						throw new Exception("Please define values for all enum");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

			});
		}
	}

}
